{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#tldr","title":"TL;DR","text":"<ul> <li>Get the latest release: https://github.com/duddel/yourgame/releases</li> <li>Explore the <code>assets/</code> directory that comes with it</li> <li>Continue reading the docs</li> </ul>"},{"location":"#demo","title":"Demo","text":"<p>This is a demo project running in the browser.</p> <p>Click here to load the demo below, or view it in full screen.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Open GL 3.3</li> <li>Web: Major browsers (supporting WebAssembly) should work</li> <li>Windows: Recent version of Microsoft Visual C++ Redistributable</li> <li>Linux: Tested on Ubuntu (with Gnome) and Arch (with Xfce)</li> </ul>"},{"location":"#about-the-docs","title":"About the Docs","text":"<ul> <li>The docs are generated from the latest push on <code>main</code> or <code>develop</code> branch, so it might be ahead of the latest release</li> <li>To see the docs for a particular commit/release, browse <code>docs/md_sites</code> in the repository (version selector on this page is intentionally not considered)</li> </ul>"},{"location":"#licenses","title":"Licenses","text":"<ul> <li>The License file contains license information about this project and thirdparty components</li> <li>The License file is packed into the asset (<code>assets/yg_LICENSES.txt</code>)</li> <li>It can be opened via the menu item in the compiled application, or in the repository</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Continue with the Manual</li> <li>Check out the code and assets of the Demo</li> <li>Read the API</li> <li>Have a look at the Changelog</li> <li>Visit the project on itch.io:</li> </ul> yourgame by didaduddel"},{"location":"Api/","title":"API","text":""},{"location":"Api/#namespaces","title":"Namespaces","text":"<ul> <li><code>yg.asset</code></li> <li><code>yg.audio</code></li> <li><code>yg.control</code></li> <li><code>yg.gl</code></li> <li><code>yg.input</code></li> <li><code>yg.interact</code></li> <li><code>yg.log</code></li> <li><code>yg.math</code></li> <li><code>yg.phys</code></li> <li><code>yg.time</code></li> <li><code>yg.util</code></li> </ul>"},{"location":"Changelog/","title":"Changelog","text":""},{"location":"Changelog/#v001-unreleased","title":"v0.0.1 (unreleased)","text":"<p>Download here: https://github.com/duddel/yourgame/releases/tag/v0.0.1</p> <ul> <li>Initial release</li> </ul>"},{"location":"Development/","title":"Development","text":""},{"location":"Development/#facts","title":"Facts","text":"<ul> <li>A new release every couple of weeks, if something meaningful happens</li> <li>Semantic Versioning approach (<code>MAJOR.MINOR.PATCH</code>)<ul> <li>But none of the rules regarding compatibility apply as long as <code>MAJOR</code> version is 0</li> <li>Expect breaking API changes, catch up using the Changelog</li> </ul> </li> <li><code>yourgame</code> is based on <code>yourgamelib</code>, which is hosted here</li> <li><code>ToDo</code>s are scattered all over the place to mark unfinished stuff. No dedicated list.</li> </ul>"},{"location":"Development/#release-checklist","title":"Release Checklist","text":""},{"location":"Development/#before-tag","title":"Before Tag","text":"<ul> <li>Check if version is correct in <code>project()</code> in <code>CMakeLists.txt</code></li> <li>Check if version is correct in Changelog</li> <li>Remove <code>(unreleased)</code> from version in Changelog</li> <li>Check generated build artifacts (<code>Actions</code>)</li> </ul>"},{"location":"Development/#after-tag","title":"After Tag","text":"<ul> <li>Set next version in <code>project()</code> in <code>CMakeLists.txt</code></li> <li>Add next version to Changelog with <code>(unreleased)</code></li> </ul>"},{"location":"Manual/","title":"Manual","text":""},{"location":"Manual/#supported-asset-file-formats","title":"Supported Asset file formats","text":"Usage Supported Formats Note Code <code>.lua</code> The main script (entry point) must be called <code>main.lua</code> Texture <code>.png</code>, <code>.jpg</code> Image formats to load with yg.asset.loadTexture() Texture Atlas <code>.json</code> See Texture Atlases (Sprite Sheets) Audio <code>.ogg</code> Audio format to load with yg.audio.storeFile() 3D Model <code>.obj</code> See 3D Models and Materials Material <code>.mtl</code> See 3D Models and Materials GLSL Shaders <code>.vert</code>, <code>.frag</code> Naming convention. See GLSL Shaders"},{"location":"Manual/#file-access","title":"File access","text":"<p>Whenever loading a file from <code>assets/</code>, <code>a//</code> has to be prepended to the actual filename. Example: <code>\"a//sprites.png\"</code></p>"},{"location":"Manual/#texture-atlases-sprite-sheets","title":"Texture Atlases (Sprite Sheets)","text":"<p>Packed texture atlases created with the tool <code>Free Texture Packer</code> (<code>FTP</code>) are supported and can be loaded with yg.asset.loadTexture().</p> <p>Tested with Free Texture Packer v0.6.7.</p> <p>The following <code>FTP</code> settings are required. The rest can be set to users taste.</p> <ul> <li>Format: <code>JSON (hash)</code> or <code>JSON (array)</code></li> <li>Allow rotation: <code>No</code></li> <li>Allow trim: <code>No</code></li> <li>Padding: <code>&gt;= 2</code> (recommended)</li> </ul>"},{"location":"Manual/#accessing-sprites-and-sequences","title":"Accessing Sprites and Sequences","text":"<ul> <li>get named sprite always with yg.gl.Texture.getCoords()</li> <li>get sequence frame sprite with yg.gl.Texture.getFrameCoords()</li> </ul> <pre><code>matches sprite names that have indexes at the end (with - or _),\nlike walking_01, or walking-01, but NOT: walking01\n</code></pre> <p>ToDo: link from these functions back to here</p>"},{"location":"Manual/#sky-images","title":"Sky images","text":"<p>Drawing Sky is not yet supported, but will be soon.</p> <p>To draw sky in the scene, an image with equirectangular projection (aspect ratio 2:1) is used. These are images that typically 360-degree cameras generate.</p> <p>ToDo: Photo example</p> <p>ToDo: Gradient/Horizon example</p> <p>ToDo: Sprite example</p> <p>This tool can be used to produce compatible sky images from 2D sprites:</p> Skybox Composing Tool by didaduddel"},{"location":"Manual/#3d-models-and-materials","title":"3D Models and Materials","text":""},{"location":"Manual/#object-obj-and-material-mtl-support","title":"Object (.obj) and Material (.mtl) support","text":"<p>3D models in <code>.obj</code> format can be loaded by <code>yourgame</code>, optionally together with a material template library <code>.mtl</code>.</p> <p>This is what <code>yourgame</code> does:</p> <ul> <li>Vertices are made unique<ul> <li>Example: If multiple faces contain the same vertex position, but different normals, <code>yourgame</code> clones the position data and creates individual vertices with different normals</li> <li>This preserves edges during rendering</li> <li>For model parts where smooth shading is desired, adjacent faces must share identical vertices, meaning the face normals must be averaged</li> <li>More details: Smooth vs. Flat Shading</li> </ul> </li> <li>The diffuse color <code>Kd</code> from Material (<code>.mtl</code>) is provided as color input to the vertex shader<ul> <li>This way, <code>Vertex Color Shading</code> can be performed</li> <li>See GLSL Shaders on how to use vertex color in Shaders</li> </ul> </li> </ul>"},{"location":"Manual/#smooth-vs-flat-shading","title":"Smooth vs. Flat Shading","text":"<p>ToDo: show how this Blender option is reflected in <code>yourgame</code></p>"},{"location":"Manual/#create-with-blender","title":"Create with Blender","text":"<p>Geometry can be created and exported with <code>Blender</code>, in <code>.obj</code> format with limited Material (<code>.mtl</code>) support.</p> <p>Tested with Blender v3.4.1.</p> <p>Here is a basic workflow, some <code>Blender</code> knowledge is required.</p> <p></p> <p>Select all parts of your model and export it with the Wavefront (<code>.obj</code>) (legacy) exporter and the recommended settings below.</p> <ul> <li>ToDo: explain settings below, mention/test Forward/Up, etc.</li> </ul> <p></p> <p>The generic <code>Principled BSDF</code> Shader has an impact on the exported <code>.mtl</code>. If you want to use it, apply this Shader to your model (or different parts of your model):</p> <ul> <li>Principled BSDF <code>Base Color</code> is exported as <code>Kd</code> (diffuse color) into the Material (<code>.mtl</code>) <ul> <li>The <code>Base Color</code> in the example Shader below causes this <code>Kd</code> entry in the exported <code>.mtl</code> file: <code>Kd 0.102684 0.235477 1.000000</code></li> </ul> </li> </ul> <p>See Object (.obj) and Material (.mtl) support on how this information can be used in <code>yourgame</code>.</p> <p></p>"},{"location":"Manual/#other-tools-and-3d-assets","title":"Other Tools and 3D Assets","text":"<p>Of course, other 3D tools can be used to generate <code>yourgame</code> compatible data. Also, some <code>.obj</code> based 3D game assets, made by <code>Kenney</code>, can be imported directly without modification.</p>"},{"location":"Manual/#glsl-shaders","title":"GLSL Shaders","text":""},{"location":"Manual/#attributes-conventions","title":"Attributes Conventions","text":"Usage Type Location GLSL Vertex Shader Code Position vec3 0 <code>layout(location = 0) in vec3 inPosition;</code> Normal vec3 1 <code>layout(location = 1) in vec3 inNormal;</code> Texcoords vec2 2 <code>layout(location = 2) in vec2 inTexcoords;</code> Color vec3 3 <code>layout(location = 3) in vec3 inColor;</code>"},{"location":"Manual/#uniforms-conventions","title":"Uniforms Conventions","text":"Usage Type Name GLSL Shader Code MVP Matrix mat4 <code>mvpMat</code> <code>uniform mat4        mvpMat;</code> VP Matrix mat4 <code>vpMat</code> <code>uniform mat4        vpMat;</code> Model Matrix mat4 <code>modelMat</code> <code>uniform mat4        modelMat;</code> Normal Matrix mat3 <code>normalMat</code> <code>uniform mat3        normalMat;</code> Camera Position vec3 <code>camPos</code> <code>uniform vec3        camPos;</code> Camera Trafo mat4 <code>camTrafo</code> <code>uniform mat4        camTrafo;</code> Sky Rotation Inverse mat3 <code>skyRotInv</code> <code>uniform mat3        skyRotInv;</code> Texture Diffuse sampler2D <code>textureDiffuse</code> <code>uniform sampler2D   textureDiffuse;</code> Texture Sky samplerCube <code>textureSky</code> <code>uniform samplerCube textureSky;</code> Light Ambient vec3 <code>lightAmbient</code> <code>uniform vec3        lightAmbient;</code> Light Diffuse vec3 <code>lightDiffuse</code> <code>uniform vec3        lightDiffuse;</code> Light Specular vec3 <code>lightSpecular</code> <code>uniform vec3        lightSpecular;</code> Light Position vec3 <code>lightPosition</code> <code>uniform vec3        lightPosition;</code> Subtexture Coordinates vec4 <code>subtex</code> <code>uniform vec4        subtex;</code>"},{"location":"yg_asset/","title":"yg.asset","text":"<p>Functions for loading assets into the asset manager.</p>"},{"location":"yg_asset/#function-ygassetclear","title":"function yg.asset.clear()","text":"<p>Clears and deletes all previously loaded assets.</p> <p><code>yg.asset.clear()</code> -&gt; <code>void</code></p>"},{"location":"yg_asset/#function-ygassetloadtexture","title":"function yg.asset.loadTexture()","text":"<p>Loads a texture or texture atlas (sprite sheet).</p> <p><code>yg.asset.loadTexture(name, imgFilename, atlasFilename, unit, filter, wrapmode, mipmap)</code> -&gt; <code>boolean</code> (<code>false</code> on error)</p> Argument Type Info <code>name</code> string Name of the texture to register it in the asset manager <code>imgFilename</code> string Filename of the image to load <code>atlasFilename</code> string Filename of the atlas file (.json) to load. May be <code>\"\"</code> <code>unit</code> string GL texture unit. Options: <code>\"DIFFUSE\"</code> <code>filter</code> string Texture filter mode. Options: <code>\"LINEAR\"</code>, <code>\"NEAREST\"</code> <code>wrapmode</code> string Texture wrap mode.Options: <code>\"REPEAT\"</code>, <code>\"MIRRORED_REPEAT\"</code>, <code>\"CLAMP_TO_EDGE\"</code> <code>mipmap</code> boolean Enable mipmapping. Options: <code>true</code>, <code>false</code>"},{"location":"yg_asset/#function-ygassetloadvertfragshader","title":"function yg.asset.loadVertFragShader()","text":"<p>Loads a GL shader program consisting of a vertex and a fragment shader.</p> <p><code>yg.asset.loadVertFragShader(name, vertFilename, fragFilename)</code> -&gt; <code>boolean</code> (<code>false</code> on error)</p> Argument Type Info <code>name</code> string Name of the shader program to register it in the asset manager <code>vertFilename</code> string Filename of the vertex shader code <code>fragFilename</code> string Filename of the fragment shader code"},{"location":"yg_asset/#function-ygassetloadgeometry","title":"function yg.asset.loadGeometry()","text":"<p>Loads a geometry file (.obj) with optional material library (.mtl).</p> <p><code>yg.asset.loadGeometry(name, objFilename, mtlFilename)</code> -&gt; <code>boolean</code> (<code>false</code> on error)</p> Argument Type Info <code>name</code> string Name of the shader program to register it in the asset manager <code>objFilename</code> string Filename of the geometry file (.obj) <code>mtlFilename</code> string Filename of the material library file (.mtl). May be <code>\"\"</code>"},{"location":"yg_asset/#function-ygassetgettexture","title":"function yg.asset.getTexture()","text":"<p>Retrieves a previously loaded Texture from the asset manager.</p> <p><code>yg.asset.getTexture(name)</code> -&gt; <code>yg.gl.Texture</code> (<code>nil</code> on error)</p> Argument Type Info <code>name</code> string Name of the Texture to retrieve"},{"location":"yg_asset/#function-ygassetgetshader","title":"function yg.asset.getShader()","text":"<p>Retrieves a previously loaded Shader program from the asset manager.</p> <p><code>yg.asset.getShader(name)</code> -&gt; <code>yg.gl.Shader</code> (<code>nil</code> on error)</p> Argument Type Info <code>name</code> string Name of the Shader program to retrieve"},{"location":"yg_asset/#function-ygassetgetgeometry","title":"function yg.asset.getGeometry()","text":"<p>Retrieves a previously loaded Geometry from the asset manager.</p> <p><code>yg.asset.getGeometry(name)</code> -&gt; <code>yg.gl.Geometry</code> (<code>nil</code> on error)</p> Argument Type Info <code>name</code> string Name of the Geometry to retrieve"},{"location":"yg_asset/#function-ygassetdestroytexture","title":"function yg.asset.destroyTexture()","text":"<p>Destroys a Texture and deletes reference from the asset manager.</p> <p><code>yg.asset.destroyTexture(name)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name of the Texture to destroy"},{"location":"yg_asset/#function-ygassetdestroyshader","title":"function yg.asset.destroyShader()","text":"<p>Destroys a Shader program and deletes reference from the asset manager.</p> <p><code>yg.asset.destroyShader(name)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name of the Shader program to destroy"},{"location":"yg_asset/#function-ygassetdestroygeometry","title":"function yg.asset.destroyGeometry()","text":"<p>Destroys a Geometry and deletes reference from the asset manager.</p> <p><code>yg.asset.destroyGeometry(name)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name of the Geometry to destroy"},{"location":"yg_asset/#function-ygassetnumoftexture","title":"function yg.asset.numOfTexture()","text":"<p>Retrieves the number of Textures currently registered in the asset manager.</p> <p><code>yg.asset.numOfTexture()</code> -&gt; <code>number</code></p>"},{"location":"yg_asset/#function-ygassetnumofshader","title":"function yg.asset.numOfShader()","text":"<p>Retrieves the number of Shader programs currently registered in the asset manager.</p> <p><code>yg.asset.numOfShader()</code> -&gt; <code>number</code></p>"},{"location":"yg_asset/#function-ygassetnumofgeometry","title":"function yg.asset.numOfGeometry()","text":"<p>Retrieves the number of Geometries currently registered in the asset manager.</p> <p><code>yg.asset.numOfGeometry()</code> -&gt; <code>number</code></p>"},{"location":"yg_audio/","title":"yg.audio","text":"<p>Functions for audio playback.</p>"},{"location":"yg_audio/#example","title":"Example","text":"<pre><code>function init()\n    -- Initialize the audio module with:\n    --   5 sources\n    --   Default number of channels\n    --   Default sample rate\n    yg.audio.init(5, 0, 0)\n    -- Store a file to play it back\n    yg.audio.storeFile(\"a//noise.ogg\")\n    -- Play the file looped endless and get the source id\n    noiseSource = yg.audio.play(\"a//noise.ogg\", true)\nend\n\nfunction tick()\n    -- Manipulate the channel gains to simulate a moving object\n    -- (assuming 2 channels)\n    gains = {1.0, 0.3}\n    yg.audio.setChannelGains(noiseSource, gains)\nend\n</code></pre>"},{"location":"yg_audio/#function-ygaudioinit","title":"function yg.audio.init()","text":"<p>Enables the audio module.</p> <p><code>yg.audio.init(numSources, numChannels, sampleRate)</code> -&gt; <code>number</code> (0 if successful)</p> Argument Type Info <code>numSources</code> number Maximum number of audio sources to be mixed during playback [<code>integer</code>] <code>numChannels</code> number Number of audio playback channels [<code>integer</code>]. set 0 for device default. <code>sampleRate</code> number Sample rate. Set 0 for device default."},{"location":"yg_audio/#function-ygaudioshutdown","title":"function yg.audio.shutdown()","text":"<p>Shuts down the audio module.</p> <p><code>yg.audio.shutdown()</code> -&gt; <code>void</code></p>"},{"location":"yg_audio/#function-ygaudioisinitialized","title":"function yg.audio.isInitialized()","text":"<p>Returns <code>true</code> if the audio module is initialized, <code>false</code> otherwise.</p> <p><code>yg.audio.isInitialized()</code> -&gt; <code>boolean</code></p>"},{"location":"yg_audio/#function-ygaudiostorefile","title":"function yg.audio.storeFile()","text":"<p>Loads a sound file (.ogg) and stores it for being played back.</p> <p><code>yg.audio.storeFile(filename)</code> -&gt; <code>number</code> (0 if successful)</p> Argument Type Info <code>filename</code> string Name of the ogg file to load"},{"location":"yg_audio/#function-ygaudioplay","title":"function yg.audio.play()","text":"<p>Starts the playback of a previously stored audio file, if a free source slot is available. In this case, the index of the source is returnes <code>[0,numSources-1]</code>. On error, a negative value is returned. The source index can be used to manipulate the playback once it has started (see yg.audio.stop(), yg.audio.pause(), etc.).</p> <p><code>yg.audio.play(filename, loop)</code> -&gt; <code>number</code> (Audio source index, or &lt; 0 on error)</p> Argument Type Info <code>filename</code> string Name of the ogg file to play <code>loop</code> boolean If <code>true</code>, playback loops endless. Plays once otherwise."},{"location":"yg_audio/#function-ygaudiostop","title":"function yg.audio.stop()","text":"<p>Stops the playback of a source and clears the slot.</p> <p><code>yg.audio.stop(sourceId)</code> -&gt; <code>number</code> (0 if successful)</p> Argument Type Info <code>sourceId</code> number Index of the source, retrieved from yg.audio.play()"},{"location":"yg_audio/#function-ygaudiopause","title":"function yg.audio.pause()","text":"<p>Pauses the playback of a source.</p> <p><code>yg.audio.pause(sourceId, pause)</code> -&gt; <code>number</code> (0 if successful)</p> Argument Type Info <code>sourceId</code> number Index of the source, retrieved from yg.audio.play() <code>pause</code> boolean If <code>true</code>, playback is paused. Options: <code>true</code>, <code>false</code>"},{"location":"yg_audio/#function-ygaudiosetchannelgains","title":"function yg.audio.setChannelGains()","text":"<p>Sets the channel gains of a source: array of numbers, typically in <code>[0,1]</code> to reduce gain on individual channels. The audio signal of each channel gets multiplied by the appropriate gain value.</p> <p><code>yg.audio.setChannelGains(sourceId, gains)</code> -&gt; <code>number</code> (0 if successful)</p> Argument Type Info <code>sourceId</code> number Index of the source, retrieved from yg.audio.play() <code>gains</code> {number} Gain values in <code>[0,1]</code> for each channel (array of number)"},{"location":"yg_control/","title":"yg.control","text":"<p>Functions for controlling the framework.</p>"},{"location":"yg_control/#function-ygcontrolexit","title":"function yg.control.exit()","text":"<p>Notifies the application to exit (shut down).</p> <p><code>yg.control.exit()</code> -&gt; <code>void</code></p>"},{"location":"yg_control/#function-ygcontrolenablefullscreen","title":"function yg.control.enableFullscreen()","text":"<p>Enables/disables fullscreen mode.</p> <p><code>yg.control.enableFullscreen(enable)</code> -&gt; <code>void</code></p> Argument Type Info <code>enable</code> boolean Enable fullscreen. Options: <code>true</code>, <code>false</code>"},{"location":"yg_control/#function-ygcontrolenablevsync","title":"function yg.control.enableVSync()","text":"<p>Enables/disables vertical sync.</p> <p><code>yg.control.enableVSync(enable)</code> -&gt; <code>void</code></p> Argument Type Info <code>enable</code> boolean Enable vertical sync. Options: <code>true</code>, <code>false</code>"},{"location":"yg_control/#function-ygcontrolcatchmouse","title":"function yg.control.catchMouse()","text":"<p>Enables/disables catched mouse.</p> <p><code>yg.control.catchMouse(enable)</code> -&gt; <code>void</code></p> Argument Type Info <code>enable</code> boolean Enable catched mouse. Options: <code>true</code>, <code>false</code>"},{"location":"yg_control/#function-ygcontrolrunscript","title":"function yg.control.runScript()","text":"<p>Starts execution of another Lua script after shutting down current running script. The current cycle, this function is called in, will be normally executed and rendered.</p> <p><code>yg.control.runScript(filename)</code> -&gt; <code>void</code></p> Argument Type Info <code>filename</code> string Filename of the Lua script to run"},{"location":"yg_control/#function-ygcontrolloadscript","title":"function yg.control.loadScript()","text":"<p>Loads and executes another Lua script while current script runs. Can be used to import additional code.</p> <p><code>yg.control.loadScript(filename)</code> -&gt; <code>void</code></p> Argument Type Info <code>filename</code> string Filename of the Lua script to load"},{"location":"yg_gl/","title":"yg.gl","text":"<p>Functions and classes for GL drawing.</p>"},{"location":"yg_gl/#function-yggldraw","title":"function yg.gl.draw()","text":"<p>Performs a GL draw call.</p> <p><code>yg.gl.draw(geo, light, shader, texture, camera, trafo)</code> -&gt; <code>void</code></p> Argument Type Info <code>geo</code> yg.gl.Geometry Geometry to draw <code>light</code> yg.gl.Lightsource Lightsource to apply. May be <code>nil</code> <code>shader</code> yg.gl.Shader Shader to use <code>texture</code> yg.gl.Texture Texture to use. May be <code>nil</code> <code>camera</code> yg.math.Camera Camera to use. May be <code>nil</code> <code>trafo</code> yg.math.Trafo Trafo to use as model trafo. May be <code>nil</code>"},{"location":"yg_gl/#function-yggldrawsprite","title":"function yg.gl.drawSprite()","text":"<p>Draws a 2-d sprite in screen space. Screen origin (<code>x=0, y=0</code>) in upper left corner.</p> <p>Returns an array of 4 numbers (<code>xmin, xmax, ymin, ymax</code>) denoting the screen space axis aligned bounding box (AABB), the sprite is drawn in, as if it was not rotated.</p> <p>The <code>coords</code> argument must be retrieved from <code>texture</code> to get valid coordinate information for a sprite from an atlas or grid texture. To draw an entire texture, yg.gl.Texture.getGridCoords(1, 1, 0) can be used. See example:</p> <pre><code>-- Example for yg.gl.drawSprite()\nfunction init()\n    yg.asset.loadTexture(\"demo\", \"a//demo.png\", \"\",\n                         \"DIFFUSE\", \"LINEAR\", \"REPEAT\", true)\n    -- Get coords for the entire texture, to draw it with drawSprite()\n    coordsDemo = yg.asset.getTexture(\"demo\"):getGridCoords(1, 1, 0)\nend\n\nfunction tick()\n    -- Use screenPos to detect clicks or collisions\n    screenPos = yg.gl.drawSprite(yg.asset.getTexture(\"demo\"),\n                                 coordsDemo, 400, 300, 250, 0, 0)\nend\n</code></pre> <p><code>yg.gl.drawSprite(texture, coords, x, y, width, height, angle)</code> -&gt; <code>{number}</code></p> Argument Type Info <code>texture</code> yg.gl.Texture Texture to draw from <code>coords</code> yg.gl.TextureCoords Subtexture coordinate info to pick sprite from atlas/grid <code>x</code> number X-position (center of sprite) <code>y</code> number Y-position (center of sprite) <code>width</code> number Width of sprite [pixels] <code>height</code> number Height of sprite [pixels] <code>angle</code> number Counter-clockwise rotation of sprite [rad]"},{"location":"yg_gl/#function-yggldepthtest","title":"function yg.gl.depthTest()","text":"<p>Enables/disables depth test via <code>glEnable(GL_DEPTH_TEST)</code> / <code>glDisable(GL_DEPTH_TEST)</code>.</p> <p><code>yg.gl.depthTest(enable)</code> -&gt; <code>void</code></p> Argument Type Info <code>enable</code> boolean Options: <code>true</code>: enable, <code>false</code>: disable"},{"location":"yg_gl/#function-ygglclearcolor","title":"function yg.gl.clearColor()","text":"<p>Sets the clear color via <code>glClearColor()</code>.</p> <p><code>yg.gl.clearColor(r, g, b, a)</code> -&gt; <code>void</code></p> Argument Type Info <code>r</code> number Red <code>g</code> number Green <code>b</code> number Blue <code>a</code> number Alpha"},{"location":"yg_gl/#class-yggltexture","title":"class yg.gl.Texture","text":""},{"location":"yg_gl/#function-yggltexturegetcoords","title":"function yg.gl.Texture.getCoords()","text":"<p>Returns coordinate information of a sprite called <code>name</code>. Typically used with textures loaded together with an atlas file, see yg.asset.loadTexture().</p> <p><code>yg.gl.Texture.getCoords(name)</code> -&gt; <code>yg.gl.TextureCoords</code></p> Argument Type Info <code>name</code> string Name of the sprite"},{"location":"yg_gl/#function-yggltexturegetframecoords","title":"function yg.gl.Texture.getFrameCoords()","text":"<p>Returns coordinate information of a sprite which is a frame of a sequence. <code>frame</code> is always wrapped into valid range and may be negative. Typically used with textures loaded together with an atlas file, see yg.asset.loadTexture().</p> <p><code>yg.gl.Texture.getFrameCoords(sequenceName, frame)</code> -&gt; <code>yg.gl.TextureCoords</code></p> Argument Type Info <code>sequenceName</code> string Name of the sprite sequence <code>frame</code> number Frame index"},{"location":"yg_gl/#function-yggltexturegetgridcoords","title":"function yg.gl.Texture.getGridCoords()","text":"<p>Returns texture coordinates of a grid cell. Any grid size can be used for any texture. To get coordinates for the entire texture, call <code>yg.gl.Texture.getGridCoords(1, 1, 0)</code>. </p> <p><code>yg.gl.Texture.getGridCoords(gridWidth, gridHeight, index)</code> -&gt; <code>yg.gl.TextureCoords</code></p> Argument Type Info <code>gridWidth</code> number Number of grid columns <code>gridHeight</code> number Number of grid rows <code>index</code> number Index of the grid cell to return coordinates for, starting top-left with index <code>0</code>"},{"location":"yg_gl/#class-yggllightsource","title":"class yg.gl.Lightsource","text":"<p>Represents a lightsource.</p>"},{"location":"yg_gl/#constructor","title":"constructor","text":"<p><code>yg.gl.Lightsource()</code> -&gt; <code>yg.gl.Lightsource</code></p>"},{"location":"yg_gl/#function-yggllightsourcesetambient","title":"function yg.gl.lightsource.setAmbient()","text":"<p>Sets ambient light component.</p> <p><code>yg.gl.lightsource.setAmbient(r, g, b)</code> -&gt; <code>void</code></p> Argument Type Info <code>r</code> number Red light component <code>g</code> number Green light component <code>b</code> number Blue light component"},{"location":"yg_gl/#function-yggllightsourcesetdiffuse","title":"function yg.gl.lightsource.setDiffuse()","text":"<p>Sets diffuse light component.</p> <p><code>yg.gl.lightsource.setDiffuse(r, g, b)</code> -&gt; <code>void</code></p> Argument Type Info <code>r</code> number Red light component <code>g</code> number Green light component <code>b</code> number Blue light component"},{"location":"yg_gl/#function-yggllightsourcesetspecular","title":"function yg.gl.lightsource.setSpecular()","text":"<p>Sets specular light component.</p> <p><code>yg.gl.lightsource.setSpecular(r, g, b)</code> -&gt; <code>void</code></p> Argument Type Info <code>r</code> number Red light component <code>g</code> number Green light component <code>b</code> number Blue light component"},{"location":"yg_gl/#function-yggllightsourcesetposition","title":"function yg.gl.lightsource.setPosition()","text":"<p>Sets light origin in world.</p> <p><code>yg.gl.lightsource.setPosition(r, g, b)</code> -&gt; <code>void</code></p> Argument Type Info <code>x</code> number X coordinate <code>y</code> number Y coordinate <code>z</code> number Z coordinate"},{"location":"yg_gl/#class-ygglgeometry","title":"class yg.gl.Geometry","text":"<p>No functionality accessible. Used to pass around instances, like from yg.asset.getGeometry() to yg.gl.draw().</p>"},{"location":"yg_gl/#class-ygglshader","title":"class yg.gl.Shader","text":"<p>No functionality accessible. Used to pass around instances, like from yg.asset.getShader() to yg.gl.draw().</p>"},{"location":"yg_gl/#class-yggltexturecoords","title":"class yg.gl.TextureCoords","text":"<p>No functionality accessible. Used to pass around instances, like from yg.gl.Texture.getCoords() to yg.gl.drawSprite().</p>"},{"location":"yg_input/","title":"yg.input","text":"<p>Functions for getting inputs.</p>"},{"location":"yg_input/#function-yginputget","title":"function yg.input.get()","text":"<p>Gets the current value of the input source.</p> <p><code>yg.input.get(source)</code> -&gt; <code>number</code></p> Argument Type Info <code>source</code> string Name of the input source. Options: see Input Sources"},{"location":"yg_input/#function-yginputgeti","title":"function yg.input.geti()","text":"<p>Gets the current value of the input sourcerounded to integer.</p> <p><code>yg.input.geti(source)</code> -&gt; <code>number</code></p> Argument Type Info <code>source</code> string Name of the input source. Options: see Input Sources"},{"location":"yg_input/#function-yginputgetdelta","title":"function yg.input.getDelta()","text":"<p>Gets the value delta of the input source since last tick.</p> <p><code>yg.input.getDelta(source)</code> -&gt; <code>number</code></p> Argument Type Info <code>source</code> string Name of the input source. Options: see Input Sources"},{"location":"yg_input/#input-sources","title":"Input Sources","text":"<p>These strings are accepted as <code>source</code> argument by the functions above.</p> Name Info <code>\"KEY_UNKNOWN\"</code> - <code>\"KEY_SPACE\"</code> - <code>\"KEY_APOSTROPHE\"</code> - <code>\"KEY_COMMA\"</code> - <code>\"KEY_MINUS\"</code> - <code>\"KEY_PERIOD\"</code> - <code>\"KEY_SLASH\"</code> - <code>\"KEY_0\"</code> - <code>\"KEY_1\"</code> - <code>\"KEY_2\"</code> - <code>\"KEY_3\"</code> - <code>\"KEY_4\"</code> - <code>\"KEY_5\"</code> - <code>\"KEY_6\"</code> - <code>\"KEY_7\"</code> - <code>\"KEY_8\"</code> - <code>\"KEY_9\"</code> - <code>\"KEY_SEMICOLON\"</code> - <code>\"KEY_EQUAL\"</code> - <code>\"KEY_A\"</code> - <code>\"KEY_B\"</code> - <code>\"KEY_C\"</code> - <code>\"KEY_D\"</code> - <code>\"KEY_E\"</code> - <code>\"KEY_F\"</code> - <code>\"KEY_G\"</code> - <code>\"KEY_H\"</code> - <code>\"KEY_I\"</code> - <code>\"KEY_J\"</code> - <code>\"KEY_K\"</code> - <code>\"KEY_L\"</code> - <code>\"KEY_M\"</code> - <code>\"KEY_N\"</code> - <code>\"KEY_O\"</code> - <code>\"KEY_P\"</code> - <code>\"KEY_Q\"</code> - <code>\"KEY_R\"</code> - <code>\"KEY_S\"</code> - <code>\"KEY_T\"</code> - <code>\"KEY_U\"</code> - <code>\"KEY_V\"</code> - <code>\"KEY_W\"</code> - <code>\"KEY_X\"</code> - <code>\"KEY_Y\"</code> - <code>\"KEY_Z\"</code> - <code>\"KEY_LEFT_BRACKET\"</code> - <code>\"KEY_BACKSLASH\"</code> - <code>\"KEY_RIGHT_BRACKET\"</code> - <code>\"KEY_GRAVE_ACCENT\"</code> - <code>\"KEY_WORLD_1\"</code> - <code>\"KEY_WORLD_2\"</code> - <code>\"KEY_ESCAPE\"</code> - <code>\"KEY_ENTER\"</code> - <code>\"KEY_TAB\"</code> - <code>\"KEY_BACKSPACE\"</code> - <code>\"KEY_INSERT\"</code> - <code>\"KEY_DELETE\"</code> - <code>\"KEY_RIGHT\"</code> - <code>\"KEY_LEFT\"</code> - <code>\"KEY_DOWN\"</code> - <code>\"KEY_UP\"</code> - <code>\"KEY_PAGE_UP\"</code> - <code>\"KEY_PAGE_DOWN\"</code> - <code>\"KEY_HOME\"</code> - <code>\"KEY_END\"</code> - <code>\"KEY_CAPS_LOCK\"</code> - <code>\"KEY_SCROLL_LOCK\"</code> - <code>\"KEY_NUM_LOCK\"</code> - <code>\"KEY_PRINT_SCREEN\"</code> - <code>\"KEY_PAUSE\"</code> - <code>\"KEY_F1\"</code> - <code>\"KEY_F2\"</code> - <code>\"KEY_F3\"</code> - <code>\"KEY_F4\"</code> - <code>\"KEY_F5\"</code> - <code>\"KEY_F6\"</code> - <code>\"KEY_F7\"</code> - <code>\"KEY_F8\"</code> - <code>\"KEY_F9\"</code> - <code>\"KEY_F10\"</code> - <code>\"KEY_F11\"</code> - <code>\"KEY_F12\"</code> - <code>\"KEY_F13\"</code> - <code>\"KEY_F14\"</code> - <code>\"KEY_F15\"</code> - <code>\"KEY_F16\"</code> - <code>\"KEY_F17\"</code> - <code>\"KEY_F18\"</code> - <code>\"KEY_F19\"</code> - <code>\"KEY_F20\"</code> - <code>\"KEY_F21\"</code> - <code>\"KEY_F22\"</code> - <code>\"KEY_F23\"</code> - <code>\"KEY_F24\"</code> - <code>\"KEY_F25\"</code> - <code>\"KEY_KP_0\"</code> - <code>\"KEY_KP_1\"</code> - <code>\"KEY_KP_2\"</code> - <code>\"KEY_KP_3\"</code> - <code>\"KEY_KP_4\"</code> - <code>\"KEY_KP_5\"</code> - <code>\"KEY_KP_6\"</code> - <code>\"KEY_KP_7\"</code> - <code>\"KEY_KP_8\"</code> - <code>\"KEY_KP_9\"</code> - <code>\"KEY_KP_DECIMAL\"</code> - <code>\"KEY_KP_DIVIDE\"</code> - <code>\"KEY_KP_MULTIPLY\"</code> - <code>\"KEY_KP_SUBTRACT\"</code> - <code>\"KEY_KP_ADD\"</code> - <code>\"KEY_KP_ENTER\"</code> - <code>\"KEY_KP_EQUAL\"</code> - <code>\"KEY_LEFT_SHIFT\"</code> - <code>\"KEY_LEFT_CONTROL\"</code> - <code>\"KEY_LEFT_ALT\"</code> - <code>\"KEY_LEFT_SUPER\"</code> - <code>\"KEY_RIGHT_SHIFT\"</code> - <code>\"KEY_RIGHT_CONTROL\"</code> - <code>\"KEY_RIGHT_ALT\"</code> - <code>\"KEY_RIGHT_SUPER\"</code> - <code>\"KEY_MENU\"</code> - <code>\"MOUSE_X\"</code> - <code>\"MOUSE_Y\"</code> - <code>\"MOUSE_BUTTON_1\"</code> left <code>\"MOUSE_BUTTON_2\"</code> right <code>\"MOUSE_BUTTON_3\"</code> middle <code>\"MOUSE_BUTTON_4\"</code> - <code>\"MOUSE_BUTTON_5\"</code> - <code>\"MOUSE_BUTTON_6\"</code> - <code>\"MOUSE_BUTTON_7\"</code> - <code>\"MOUSE_BUTTON_8\"</code> - <code>\"SCROLL_OFFSET_X\"</code> - <code>\"SCROLL_OFFSET_Y\"</code> - <code>\"TOUCH_0_DOWN\"</code> - <code>\"TOUCH_0_X\"</code> - <code>\"TOUCH_0_Y\"</code> - <code>\"TOUCH_1_DOWN\"</code> - <code>\"TOUCH_1_X\"</code> - <code>\"TOUCH_1_Y\"</code> - <code>\"TOUCH_2_DOWN\"</code> - <code>\"TOUCH_2_X\"</code> - <code>\"TOUCH_2_Y\"</code> - <code>\"TOUCH_3_DOWN\"</code> - <code>\"TOUCH_3_X\"</code> - <code>\"TOUCH_3_Y\"</code> - <code>\"TOUCH_4_DOWN\"</code> - <code>\"TOUCH_4_X\"</code> - <code>\"TOUCH_4_Y\"</code> - <code>\"TOUCH_5_DOWN\"</code> - <code>\"TOUCH_5_X\"</code> - <code>\"TOUCH_5_Y\"</code> - <code>\"TOUCH_6_DOWN\"</code> - <code>\"TOUCH_6_X\"</code> - <code>\"TOUCH_6_Y\"</code> - <code>\"TOUCH_7_DOWN\"</code> - <code>\"TOUCH_7_X\"</code> - <code>\"TOUCH_7_Y\"</code> - <code>\"TOUCH_8_DOWN\"</code> - <code>\"TOUCH_8_X\"</code> - <code>\"TOUCH_8_Y\"</code> - <code>\"TOUCH_9_DOWN\"</code> - <code>\"TOUCH_9_X\"</code> - <code>\"TOUCH_9_Y\"</code> - <code>\"GAMEPAD_0_CONNECTED\"</code> - <code>\"GAMEPAD_0_BUTTON_A\"</code> - <code>\"GAMEPAD_0_BUTTON_B\"</code> - <code>\"GAMEPAD_0_BUTTON_X\"</code> - <code>\"GAMEPAD_0_BUTTON_Y\"</code> - <code>\"GAMEPAD_0_BUTTON_LEFT_BUMPER\"</code> - <code>\"GAMEPAD_0_BUTTON_RIGHT_BUMPER\"</code> - <code>\"GAMEPAD_0_BUTTON_BACK\"</code> - <code>\"GAMEPAD_0_BUTTON_START\"</code> - <code>\"GAMEPAD_0_BUTTON_GUIDE\"</code> - <code>\"GAMEPAD_0_BUTTON_LEFT_THUMB\"</code> - <code>\"GAMEPAD_0_BUTTON_RIGHT_THUMB\"</code> - <code>\"GAMEPAD_0_BUTTON_DPAD_UP\"</code> - <code>\"GAMEPAD_0_BUTTON_DPAD_RIGHT\"</code> - <code>\"GAMEPAD_0_BUTTON_DPAD_DOWN\"</code> - <code>\"GAMEPAD_0_BUTTON_DPAD_LEFT\"</code> - <code>\"GAMEPAD_0_AXIS_LEFT_X\"</code> - <code>\"GAMEPAD_0_AXIS_LEFT_Y\"</code> - <code>\"GAMEPAD_0_AXIS_RIGHT_X\"</code> - <code>\"GAMEPAD_0_AXIS_RIGHT_Y\"</code> - <code>\"GAMEPAD_0_AXIS_LEFT_TRIGGER\"</code> - <code>\"GAMEPAD_0_AXIS_RIGHT_TRIGGER\"</code> - <code>\"GAMEPAD_1_CONNECTED\"</code> - <code>\"GAMEPAD_1_BUTTON_A\"</code> - <code>\"GAMEPAD_1_BUTTON_B\"</code> - <code>\"GAMEPAD_1_BUTTON_X\"</code> - <code>\"GAMEPAD_1_BUTTON_Y\"</code> - <code>\"GAMEPAD_1_BUTTON_LEFT_BUMPER\"</code> - <code>\"GAMEPAD_1_BUTTON_RIGHT_BUMPER\"</code> - <code>\"GAMEPAD_1_BUTTON_BACK\"</code> - <code>\"GAMEPAD_1_BUTTON_START\"</code> - <code>\"GAMEPAD_1_BUTTON_GUIDE\"</code> - <code>\"GAMEPAD_1_BUTTON_LEFT_THUMB\"</code> - <code>\"GAMEPAD_1_BUTTON_RIGHT_THUMB\"</code> - <code>\"GAMEPAD_1_BUTTON_DPAD_UP\"</code> - <code>\"GAMEPAD_1_BUTTON_DPAD_RIGHT\"</code> - <code>\"GAMEPAD_1_BUTTON_DPAD_DOWN\"</code> - <code>\"GAMEPAD_1_BUTTON_DPAD_LEFT\"</code> - <code>\"GAMEPAD_1_AXIS_LEFT_X\"</code> - <code>\"GAMEPAD_1_AXIS_LEFT_Y\"</code> - <code>\"GAMEPAD_1_AXIS_RIGHT_X\"</code> - <code>\"GAMEPAD_1_AXIS_RIGHT_Y\"</code> - <code>\"GAMEPAD_1_AXIS_LEFT_TRIGGER\"</code> - <code>\"GAMEPAD_1_AXIS_RIGHT_TRIGGER\"</code> - <code>\"GAMEPAD_2_CONNECTED\"</code> - <code>\"GAMEPAD_2_BUTTON_A\"</code> - <code>\"GAMEPAD_2_BUTTON_B\"</code> - <code>\"GAMEPAD_2_BUTTON_X\"</code> - <code>\"GAMEPAD_2_BUTTON_Y\"</code> - <code>\"GAMEPAD_2_BUTTON_LEFT_BUMPER\"</code> - <code>\"GAMEPAD_2_BUTTON_RIGHT_BUMPER\"</code> - <code>\"GAMEPAD_2_BUTTON_BACK\"</code> - <code>\"GAMEPAD_2_BUTTON_START\"</code> - <code>\"GAMEPAD_2_BUTTON_GUIDE\"</code> - <code>\"GAMEPAD_2_BUTTON_LEFT_THUMB\"</code> - <code>\"GAMEPAD_2_BUTTON_RIGHT_THUMB\"</code> - <code>\"GAMEPAD_2_BUTTON_DPAD_UP\"</code> - <code>\"GAMEPAD_2_BUTTON_DPAD_RIGHT\"</code> - <code>\"GAMEPAD_2_BUTTON_DPAD_DOWN\"</code> - <code>\"GAMEPAD_2_BUTTON_DPAD_LEFT\"</code> - <code>\"GAMEPAD_2_AXIS_LEFT_X\"</code> - <code>\"GAMEPAD_2_AXIS_LEFT_Y\"</code> - <code>\"GAMEPAD_2_AXIS_RIGHT_X\"</code> - <code>\"GAMEPAD_2_AXIS_RIGHT_Y\"</code> - <code>\"GAMEPAD_2_AXIS_LEFT_TRIGGER\"</code> - <code>\"GAMEPAD_2_AXIS_RIGHT_TRIGGER\"</code> - <code>\"GAMEPAD_3_CONNECTED\"</code> - <code>\"GAMEPAD_3_BUTTON_A\"</code> - <code>\"GAMEPAD_3_BUTTON_B\"</code> - <code>\"GAMEPAD_3_BUTTON_X\"</code> - <code>\"GAMEPAD_3_BUTTON_Y\"</code> - <code>\"GAMEPAD_3_BUTTON_LEFT_BUMPER\"</code> - <code>\"GAMEPAD_3_BUTTON_RIGHT_BUMPER\"</code> - <code>\"GAMEPAD_3_BUTTON_BACK\"</code> - <code>\"GAMEPAD_3_BUTTON_START\"</code> - <code>\"GAMEPAD_3_BUTTON_GUIDE\"</code> - <code>\"GAMEPAD_3_BUTTON_LEFT_THUMB\"</code> - <code>\"GAMEPAD_3_BUTTON_RIGHT_THUMB\"</code> - <code>\"GAMEPAD_3_BUTTON_DPAD_UP\"</code> - <code>\"GAMEPAD_3_BUTTON_DPAD_RIGHT\"</code> - <code>\"GAMEPAD_3_BUTTON_DPAD_DOWN\"</code> - <code>\"GAMEPAD_3_BUTTON_DPAD_LEFT\"</code> - <code>\"GAMEPAD_3_AXIS_LEFT_X\"</code> - <code>\"GAMEPAD_3_AXIS_LEFT_Y\"</code> - <code>\"GAMEPAD_3_AXIS_RIGHT_X\"</code> - <code>\"GAMEPAD_3_AXIS_RIGHT_Y\"</code> - <code>\"GAMEPAD_3_AXIS_LEFT_TRIGGER\"</code> - <code>\"GAMEPAD_3_AXIS_RIGHT_TRIGGER\"</code> - <code>\"WINDOW_WIDTH\"</code> - <code>\"WINDOW_HEIGHT\"</code> - <code>\"WINDOW_ASPECT_RATIO\"</code> - <code>\"WINDOW_FULLSCREEN\"</code> - <code>\"VSYNC_ON\"</code> - <code>\"MOUSE_CATCHED\"</code> -"},{"location":"yg_interact/","title":"yg.interact","text":"<p>Functions for adding and reading values from interact GUI items.</p>"},{"location":"yg_interact/#function-yginteractaddnumber","title":"function yg.interact.addNumber()","text":"<p>Adds an interact GUI item for controlling a number (float scalar) value.</p> <p><code>function yg.interact.addNumber(name, unit, value, min, max)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name (label) of the interact item <code>unit</code> string Unit label for the value of the item <code>value</code> number Initial value <code>min</code> number Minimum value <code>max</code> number Maximum value"},{"location":"yg_interact/#function-yginteractaddinteger","title":"function yg.interact.addInteger()","text":"<p>Adds an interact GUI item for controlling an integer (int scalar) value.</p> <p><code>function yg.interact.addInteger(name, unit, value, min, max)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name (label) of the interact item <code>unit</code> string Unit label for the value of the item <code>value</code> number Initial value <code>min</code> number Minimum value <code>max</code> number Maximum value"},{"location":"yg_interact/#function-yginteractaddvector2","title":"function yg.interact.addVector2()","text":"<p>Adds an interact GUI item for controlling a 2-component vector.</p> <p><code>function yg.interact.addVector2(name, x, y)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name (label) of the interact item <code>x</code> number Initial x value <code>y</code> number Initial y value"},{"location":"yg_interact/#function-yginteractaddvector3","title":"function yg.interact.addVector3()","text":"<p>Adds an interact GUI item for controlling a 3-component vector.</p> <p><code>function yg.interact.addVector3(name, x, y, z)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name (label) of the interact item <code>x</code> number Initial x value <code>y</code> number Initial y value <code>z</code> number Initial z value"},{"location":"yg_interact/#function-yginteractaddbinary","title":"function yg.interact.addBinary()","text":"<p>Adds an interact GUI item for controlling a boolean.</p> <p><code>function yg.interact.addBinary(name, unit, value)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name (label) of the interact item <code>unit</code> string Unit label for the value of the item <code>value</code> boolean Initial state"},{"location":"yg_interact/#function-yginteractaddrgb","title":"function yg.interact.addRGB()","text":"<p>Adds an interact GUI item for controlling RGB values (color picker).</p> <p><code>function yg.interact.addRGB(name, r, g, b)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name (label) of the interact item <code>r</code> number Initial red value <code>g</code> number Initial green value <code>b</code> number Initial blue value"},{"location":"yg_interact/#function-yginteractaddrgba","title":"function yg.interact.addRGBA()","text":"<p>Adds an interact GUI item for controlling RGBA values (color picker).</p> <p><code>function yg.interact.addRGBA(name, r, g, b, a)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name (label) of the interact item <code>r</code> number Initial red value <code>g</code> number Initial green value <code>b</code> number Initial blue value <code>a</code> number Initial alpha value"},{"location":"yg_interact/#function-yginteractaddaction","title":"function yg.interact.addAction()","text":"<p>Adds an interact GUI item for performing an action (button).</p> <p><code>function yg.interact.addAction(name, unit)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name (label) of the interact item <code>unit</code> string Button label"},{"location":"yg_interact/#function-yginteractaddselect","title":"function yg.interact.addSelect()","text":"<p>Adds an interact GUI item for picking an item (list box).</p> <p><code>function yg.interact.addSelect(name, items, value)</code> -&gt; <code>void</code></p> Argument Type Info <code>name</code> string Name (label) of the interact item <code>items</code> {string} Names of the items (array of strings) <code>value</code> number Index of the initially selected item"},{"location":"yg_interact/#function-yginteractgetnumber","title":"function yg.interact.getNumber()","text":"<p>Returns the current value of a number interact GUI item.</p> <p><code>function yg.interact.getNumber(name)</code> -&gt; <code>number</code></p> Argument Type Info <code>name</code> string Name of the interact item to get data from"},{"location":"yg_interact/#function-yginteractgetinteger","title":"function yg.interact.getInteger()","text":"<p>Returns the current value of an integer interact GUI item.</p> <p><code>function yg.interact.getInteger(name)</code> -&gt; <code>number</code></p> Argument Type Info <code>name</code> string Name of the interact item to get data from"},{"location":"yg_interact/#function-yginteractgetvector2","title":"function yg.interact.getVector2()","text":"<p>Returns the current values of a 2-component vector interact GUI item.</p> <p><code>function yg.interact.getVector2(name)</code> -&gt; <code>{number}</code></p> Argument Type Info <code>name</code> string Name of the interact item to get data from"},{"location":"yg_interact/#function-yginteractgetvector3","title":"function yg.interact.getVector3()","text":"<p>Returns the current values of a 3-component vector interact GUI item.</p> <p><code>function yg.interact.getVector3(name)</code> -&gt; <code>{number}</code></p> Argument Type Info <code>name</code> string Name of the interact item to get data from"},{"location":"yg_interact/#function-yginteractgetbinary","title":"function yg.interact.getBinary()","text":"<p>Returns the current value of a boolean interact GUI item.</p> <p><code>function yg.interact.getBinary(name)</code> -&gt; <code>boolean</code></p> Argument Type Info <code>name</code> string Name of the interact item to get data from"},{"location":"yg_interact/#function-yginteractgetrgb","title":"function yg.interact.getRGB()","text":"<p>Returns the current values of a RGB (color picker) interact GUI item.</p> <p><code>function yg.interact.getRGB(name)</code> -&gt; <code>{number}</code></p> Argument Type Info <code>name</code> string Name of the interact item to get data from"},{"location":"yg_interact/#function-yginteractgetrgba","title":"function yg.interact.getRGBA()","text":"<p>Returns the current values of a RGBA (color picker) interact GUI item.</p> <p><code>function yg.interact.getRGBA(name)</code> -&gt; <code>{number}</code></p> Argument Type Info <code>name</code> string Name of the interact item to get data from"},{"location":"yg_interact/#function-yginteractgetaction","title":"function yg.interact.getAction()","text":"<p>Returns <code>true</code> if the action was initiated (button was clicked).</p> <p><code>function yg.interact.getAction(name)</code> -&gt; <code>boolean</code></p> Argument Type Info <code>name</code> string Name of the interact item to get data from"},{"location":"yg_interact/#function-yginteractgetselect","title":"function yg.interact.getSelect()","text":"<p>Returns the index of the currently selected item of the list box.</p> <p><code>function yg.interact.getSelect(name)</code> -&gt; <code>number</code></p> Argument Type Info <code>name</code> string Name of the interact item to get data from"},{"location":"yg_log/","title":"yg.log","text":"<p>Functions for logging.</p>"},{"location":"yg_log/#function-yglogdebug","title":"function yg.log.debug()","text":"<p>Logs a message with log level <code>debug</code>.</p> <p><code>yg.log.debug(message)</code> -&gt; <code>void</code></p> Argument Type Info <code>message</code> string Log message"},{"location":"yg_log/#function-ygloginfo","title":"function yg.log.info()","text":"<p>Logs a message with log level <code>info</code>.</p> <p><code>yg.log.info(message)</code>-&gt; <code>void</code></p> Argument Type Info <code>message</code> string Log message"},{"location":"yg_log/#function-yglogwarn","title":"function yg.log.warn()","text":"<p>Logs a message with log level <code>warn</code>.</p> <p><code>yg.log.warn(message)</code>-&gt; <code>void</code></p> Argument Type Info <code>message</code> string Log message"},{"location":"yg_log/#function-yglogerror","title":"function yg.log.error()","text":"<p>Logs a message with log level <code>error</code>.</p> <p><code>yg.log.error(message)</code>-&gt; <code>void</code></p> Argument Type Info <code>message</code> string Log message"},{"location":"yg_math/","title":"yg.math","text":"<p>Classes for math.</p>"},{"location":"yg_math/#class-ygmathtrafo","title":"class yg.math.Trafo","text":"<p>Represents a 3-dimensional homogeneous transform.</p>"},{"location":"yg_math/#constructor","title":"constructor","text":"<p><code>yg.math.Trafo()</code> -&gt; <code>yg.math.Trafo</code></p>"},{"location":"yg_math/#function-ygmathtraforotatelocal","title":"function yg.math.Trafo.rotateLocal()","text":"<p>Rotates the transform around local axis <code>ax</code> by <code>angle</code> radians.</p> <p><code>yg.math.Trafo.rotateLocal(angle, ax)</code> -&gt; <code>void</code></p> Argument Type Info <code>angle</code> number Radians to rotate <code>ax</code> string Local rotation axis. Options: <code>\"X\"</code>, <code>\"Y\"</code>, <code>\"Z\"</code>"},{"location":"yg_math/#function-ygmathtraforotateglobal","title":"function yg.math.Trafo.rotateGlobal()","text":"<p>Rotates the transform around global axis <code>ax</code> by <code>angle</code> radians.</p> <p><code>yg.math.Trafo.rotateGlobal(angle, ax)</code> -&gt; <code>void</code></p> Argument Type Info <code>angle</code> number Radians to rotate <code>ax</code> string Global rotation axis. Options: <code>\"X\"</code>, <code>\"Y\"</code>, <code>\"Z\"</code>"},{"location":"yg_math/#function-ygmathtrafotranslatelocal","title":"function yg.math.Trafo.translateLocal()","text":"<p>Translates the transform by local vector <code>trans</code>.</p> <p><code>yg.math.Trafo.translateLocal(trans)</code> -&gt; <code>void</code></p> Argument Type Info <code>trans</code> {number} Local translation vector (array of 3 numbers)"},{"location":"yg_math/#function-ygmathtrafotranslateglobal","title":"function yg.math.Trafo.translateGlobal()","text":"<p>Translates the transform by global vector <code>trans</code>.</p> <p><code>yg.math.Trafo.translateGlobal(trans)</code> -&gt; <code>void</code></p> Argument Type Info <code>trans</code> {number} Global translation vector (array of 3 numbers)"},{"location":"yg_math/#function-ygmathtrafosetscalelocal","title":"function yg.math.Trafo.setScaleLocal()","text":"<p>Sets the (local) scale of the transform to <code>scale</code> (array of 3 numbers), {x,y,z}-component.</p> <p><code>yg.math.Trafo.setScaleLocal(scale)</code> -&gt; <code>void</code></p> Argument Type Info <code>scale</code> {number} Scale to set (array of 3 numbers)"},{"location":"yg_math/#function-ygmathtrafosetrotation","title":"function yg.math.Trafo.setRotation()","text":"<p>Sets the rotation of the transform from a quaternion.</p> <p><code>yg.math.Trafo.setRotation(rot)</code> -&gt; <code>void</code></p> Argument Type Info <code>rot</code> {number} Quaternion to set rotation from (array of 4 numbers)"},{"location":"yg_math/#function-ygmathtrafosettranslation","title":"function yg.math.Trafo.setTranslation()","text":"<p>Sets the translation of the transform.</p> <p><code>yg.math.Trafo.setTranslation(trans)</code> -&gt; <code>void</code></p> Argument Type Info <code>trans</code> {number} Vector to set translation from (array of 3 numbers)"},{"location":"yg_math/#function-ygmathtrafopointto","title":"function yg.math.Trafo.pointTo()","text":"<p>Points the positive Z axis (Z+) of the transform to <code>center</code> point, with transform origin <code>eye</code>, respecting up vector <code>up</code>.</p> <p><code>yg.math.Trafo.pointTo(eye, center, up)</code> -&gt; <code>void</code></p> Argument Type Info <code>eye</code> {number} Eye (origin) vector (array of 3 numbers) <code>center</code> {number} Center vector (array of 3 numbers) <code>up</code> {number} Up vector (array of 3 numbers)"},{"location":"yg_math/#function-ygmathtrafolookat","title":"function yg.math.Trafo.lookAt()","text":"<p>Points the negative Z axis (Z-) of the transform to <code>center</code> point, with transform origin <code>eye</code>, respecting up vector <code>up</code>. Typically used to create an extrinsic camera matrix to generate a view matrix during rendering.</p> <p><code>yg.math.Trafo.lookAt(eye, center, up)</code> -&gt; <code>void</code></p> Argument Type Info <code>eye</code> {number} Eye (origin) vector (array of 3 numbers) <code>center</code> {number} Center vector (array of 3 numbers) <code>up</code> {number} Up vector (array of 3 numbers)"},{"location":"yg_math/#function-ygmathtrafolerp","title":"function yg.math.Trafo.lerp()","text":"<p>Performs linear interpolation of this transform to <code>target</code> transform by using interpolation factor <code>t</code> in [0,1].</p> <p><code>yg.math.Trafo.lerp(t, target, dst)</code> -&gt; <code>void</code></p> Argument Type Info <code>t</code> number Interpolation factor in [0,1] <code>target</code> yg.math.Trafo Target transform to interpolate to <code>dst</code> yg.math.Trafo Destination (output) transform"},{"location":"yg_math/#function-ygmathtrafosetidentity","title":"function yg.math.Trafo.setIdentity()","text":"<p>Resets the transform. Resulting matrix is identity.</p> <p><code>yg.math.Trafo.setIdentity()</code> -&gt; <code>void</code></p>"},{"location":"yg_math/#function-ygmathtrafogetaxislocalax","title":"function yg.math.Trafo.getAxisLocal(ax)","text":"<p>Returns a local axis of the transform (array of 3 numbers), expressed in world system. TODO: this function is not wrapped to accept STRINGS. Does it even work?</p> <p><code>yg.math.Trafo.getAxisLocal(ax)</code> -&gt; <code>{number}</code></p> Argument Type Info <code>ax</code> string Desired axis. Options: <code>\"X\"</code>, <code>\"Y\"</code>, <code>\"Z\"</code>"},{"location":"yg_math/#function-ygmathtrafogetaxisglobalax","title":"function yg.math.Trafo.getAxisGlobal(ax)","text":"<p>Returns a global axis of the transform (array of 3 numbers).</p> <ul> <li><code>\"X\"</code> -&gt; {1, 0, 0}</li> <li><code>\"Y\"</code> -&gt; {0, 1, 0}</li> <li><code>\"Z\"</code> -&gt; {0, 0, 1}</li> </ul> <p>TODO: this function is not wrapped to accept STRINGS. Does it even work?</p> <p><code>yg.math.Trafo.getAxisGlobal(ax)</code> -&gt; <code>{number}</code></p> Argument Type Info <code>ax</code> string Desired axis. Options: <code>\"X\"</code>, <code>\"Y\"</code>, <code>\"Z\"</code>"},{"location":"yg_math/#function-ygmathtrafogeteye","title":"function yg.math.Trafo.getEye()","text":"<p>Returns the eye (origin) of the transform (array of 3 numbers).</p> <p><code>yg.math.Trafo.getEye()</code> -&gt; <code>{number}</code></p>"},{"location":"yg_math/#function-ygmathtrafogetrotation","title":"function yg.math.Trafo.getRotation()","text":"<p>Returns the rotation of the transform as a quaternion (array of 4 numbers).</p> <p><code>yg.math.Trafo.getRotation()</code> -&gt; <code>{number}</code></p>"},{"location":"yg_math/#function-ygmathtrafogetscale","title":"function yg.math.Trafo.getScale()","text":"<p>Returns the scale of the transform (array of 3 numbers).</p> <p><code>yg.math.Trafo.getScale()</code> -&gt; <code>{number}</code></p>"},{"location":"yg_math/#class-ygmathcamera","title":"class yg.math.Camera","text":"<p>Represents a camera with extrinsics (pose in world) and intrinsics (projection) in 3-dimensional space.</p>"},{"location":"yg_math/#constructor_1","title":"constructor","text":"<p><code>yg.math.Camera()</code> -&gt; <code>yg.math.Camera</code></p>"},{"location":"yg_math/#function-ygmathcamerasetperspective","title":"function yg.math.Camera.setPerspective()","text":"<p>Sets the camera to <code>PERSPECTIVE</code> projection mode.</p> <p><code>yg.math.Camera.setPerspective(fovy, aspect, zNear, zFar)</code> -&gt; <code>void</code></p> Argument Type Info <code>fovy</code> number Vertical (Y) field of view [degrees] <code>aspect</code> number Aspect ratio (width/height = X/Y) <code>zNear</code> number Distance of near clipping plane <code>zFar</code> number Distance of far clipping plane"},{"location":"yg_math/#function-ygmathcamerasetorthographic","title":"function yg.math.Camera.setOrthographic()","text":"<p>Sets the camera to <code>ORTHOGRAPHIC</code> projection mode.</p> <p><code>yg.math.Camera.setOrthographic(height, aspect, zNear, zFar)</code> -&gt; <code>void</code></p> Argument Type Info <code>height</code> number Height of the view cuboid <code>aspect</code> number Aspect ratio (width/height = X/Y) <code>zNear</code> number Distance of near clipping plane <code>zFar</code> number Distance of far clipping plane"},{"location":"yg_math/#function-ygmathcamerasetfovy","title":"function yg.math.Camera.setFovy()","text":"<p>Sets the vertical (Y) field of view. Always set but only valid during <code>PERSPECTIVE</code> projection mode.</p> <p><code>yg.math.Camera.setFovy(fovy)</code> -&gt; <code>void</code></p> Argument Type Info <code>fovy</code> number Vertical (Y) field of view [degrees]"},{"location":"yg_math/#function-ygmathcamerasetheight","title":"function yg.math.Camera.setHeight()","text":"<p>Sets the height of the view cuboid. Always set but only valid during <code>ORTHOGRAPHIC</code> projection mode.</p> <p><code>yg.math.Camera.setHeight(height)</code> -&gt; <code>void</code></p> Argument Type Info <code>height</code> number Height of the view cuboid"},{"location":"yg_math/#function-ygmathcamerasetaspect","title":"function yg.math.Camera.setAspect()","text":"<p>Sets the projection aspect ratio. Valid for both <code>PERSPECTIVE</code> and <code>ORTHOGRAPHIC</code> projection modes.</p> <p><code>yg.math.Camera.setAspect(aspect)</code> -&gt; <code>void</code></p> Argument Type Info <code>aspect</code> number Aspect ratio (width/height = X/Y)"},{"location":"yg_math/#function-ygmathcamerasetznear","title":"function yg.math.Camera.setZNear()","text":"<p>Sets the distance of the near clipping plane. Valid for both <code>PERSPECTIVE</code> and <code>ORTHOGRAPHIC</code> projection modes.</p> <p><code>yg.math.Camera.setZNear(zNear)</code> -&gt; <code>void</code></p> Argument Type Info <code>zNear</code> number Distance of near clipping plane"},{"location":"yg_math/#function-ygmathcamerasetzfar","title":"function yg.math.Camera.setZFar()","text":"<p>Sets the distance of the far clipping plane. Valid for both <code>PERSPECTIVE</code> and <code>ORTHOGRAPHIC</code> projection modes.</p> <p><code>yg.math.Camera.setZFar(zFar)</code> -&gt; <code>void</code></p> Argument Type Info <code>zFar</code> number Distance of far clipping plane"},{"location":"yg_math/#function-ygmathcameratrafo","title":"function yg.math.Camera.trafo()","text":"<p>Returns (a reference to) the transform of the camera (extrinsics).</p> <p><code>yg.math.Camera.trafo()</code> -&gt; <code>yg.math.Trafo</code></p>"},{"location":"yg_math/#function-ygmathcameracastray","title":"function yg.math.Camera.castRay()","text":"<p>Casts a ray into the scene through viewport coordinates and returns it as an array of 6 numbers, representing the origin and direction of the ray: <code>{org.x, org.y, org.z, dir.x, dir.y, dir.z}</code>.</p> <p><code>yg.math.Camera.castRay(viewportX, viewportY)</code> -&gt; <code>{number}</code></p> Argument Type Info <code>viewportX</code> number X-component of viewport coordinates to cast a ray through <code>viewportY</code> number Y-component of viewport coordinates to cast a ray through"},{"location":"yg_phys/","title":"yg.phys","text":"<p>Classes for 3-dimensional physics. With Bullet physics library under the hood.</p>"},{"location":"yg_phys/#class-ygphysphysenv","title":"class yg.phys.PhysEnv","text":"<p>Represents a physics environment. An instance of this class is mandatory to realize a physics simulation.</p>"},{"location":"yg_phys/#constructor","title":"constructor","text":"<p><code>yg.phys.PhysEnv()</code> -&gt; <code>yg.phys.PhysEnv</code></p>"},{"location":"yg_phys/#function-ygphysphysenvsetgravity","title":"function yg.phys.PhysEnv.setGravity()","text":"<p>Sets the gravity vector of the Physics Environment.</p> <p><code>yg.phys.PhysEnv.setGravity(x, y, z)</code> -&gt; <code>void</code></p> Argument Type Info <code>x</code> number X-component of the gravity vector [m/s^2] <code>y</code> number Y-component of the gravity vector [m/s^2] <code>z</code> number Z-component of the gravity vector [m/s^2]"},{"location":"yg_phys/#function-ygphysphysenvnewboxshape","title":"function yg.phys.PhysEnv.newBoxShape()","text":"<p>Creates and stores a new Box Shape in the Physics Environment.</p> <p><code>yg.phys.PhysEnv.newBoxShape(name, halfX, halfY, halfZ)</code> -&gt; <code>boolean</code> (<code>true</code> on success, <code>false</code> otherwise)</p> Argument Type Info <code>name</code> string Name of the new Shape <code>halfX</code> number Half extends in X-dimension [m] <code>halfY</code> number Half extends in Y-dimension [m] <code>halfZ</code> number Half extends in Z-dimension [m]"},{"location":"yg_phys/#function-ygphysphysenvnewsphereshape","title":"function yg.phys.PhysEnv.newSphereShape()","text":"<p>Creates and stores a new Sphere Shape in the Physics Environment.</p> <p><code>yg.phys.PhysEnv.newSphereShape(name, radius)</code> -&gt; <code>boolean</code> (<code>true</code> on success, <code>false</code> otherwise)</p> Argument Type Info <code>name</code> string Name of the new Shape <code>radius</code> number Radius [m]"},{"location":"yg_phys/#function-ygphysphysenvnewcylindershape","title":"function yg.phys.PhysEnv.newCylinderShape()","text":"<p>Creates and stores a new Cylinder Shape in the Physics Environment.</p> <p><code>yg.phys.PhysEnv.newCylinderShape(name, radius, height)</code> -&gt; <code>boolean</code> (<code>true</code> on success, <code>false</code> otherwise)</p> Argument Type Info <code>name</code> string Name of the new Shape <code>radius</code> number Radius [m] <code>height</code> number Height [m]"},{"location":"yg_phys/#function-ygphysphysenvnewconeshape","title":"function yg.phys.PhysEnv.newConeShape()","text":"<p>Creates and stores a new Cone Shape in the Physics Environment.</p> <p><code>yg.phys.PhysEnv.newConeShape(name, radius, height)</code> -&gt; <code>boolean</code> (<code>true</code> on success, <code>false</code> otherwise)</p> Argument Type Info <code>name</code> string Name of the new Shape <code>radius</code> number Radius [m] <code>height</code> number Height [m]"},{"location":"yg_phys/#function-ygphysphysenvdeleteshape","title":"function yg.phys.PhysEnv.deleteShape()","text":"<p>Deletes the Shape with name <code>name</code> from the Physics Environment, if present.</p> <p><code>yg.phys.PhysEnv.deleteShape(name)</code> -&gt; <code>boolean</code> (<code>true</code> on success, <code>false</code> otherwise)</p> Argument Type Info <code>name</code> string Name of the Shape to delete"},{"location":"yg_phys/#function-ygphysphysenvclearshapes","title":"function yg.phys.PhysEnv.clearShapes()","text":"<p>Deletes all Shapes from the Physics Environment.</p> <p><code>yg.phys.PhysEnv.clearShapes()</code> -&gt; <code>number</code> (Number of Shapes that have been deleted)</p>"},{"location":"yg_phys/#function-ygphysphysenvnumshapes","title":"function yg.phys.PhysEnv.numShapes()","text":"<p>Returns the number of Shapes contained in the Physics Environment.</p> <p><code>yg.phys.PhysEnv.numShapes()</code> -&gt; <code>number</code></p>"},{"location":"yg_phys/#function-ygphysphysenvnewrigidbody","title":"function yg.phys.PhysEnv.newRigidBody()","text":"<p>Creates and stores a new Rigid Body in the Physics Environment.</p> <p><code>yg.phys.PhysEnv.newRigidBody(name, shapeName, trafo, info)</code> -&gt; <code>boolean</code> (<code>true</code> on success, <code>false</code> otherwise)</p> Argument Type Info <code>name</code> string Name of the new Rigid Body <code>shapeName</code> string Name of the Shape to apply <code>trafo</code> yg.math.Trafo Initial pose <code>info</code> yg.phys.RigidBodyInfo Rigid Body Info"},{"location":"yg_phys/#function-ygphysphysenvdeleterigidbody","title":"function yg.phys.PhysEnv.deleteRigidBody()","text":"<p>Deletes the Rigid Body with name <code>name</code> from the Physics Environment, if present.</p> <p><code>yg.phys.PhysEnv.deleteRigidBody(name)</code> -&gt; <code>boolean</code> (<code>true</code> on success, <code>false</code> otherwise)</p> Argument Type Info <code>name</code> string Name of the Rigid Body to delete"},{"location":"yg_phys/#function-ygphysphysenvclearrigidbodies","title":"function yg.phys.PhysEnv.clearRigidBodies()","text":"<p>Deletes all Rigid Bodies from the Physics Environment.</p> <p><code>yg.phys.PhysEnv.clearRigidBodies()</code> -&gt; <code>number</code> (Number of Rigid Bodies that have been deleted)</p>"},{"location":"yg_phys/#function-ygphysphysenvnumrigidbodies","title":"function yg.phys.PhysEnv.numRigidBodies()","text":"<p>Returns the number of Rigid Bodies contained in the Physics Environment.</p> <p><code>yg.phys.PhysEnv.numRigidBodies()</code> -&gt; <code>number</code></p>"},{"location":"yg_phys/#function-ygphysphysenvgetrigidbody","title":"function yg.phys.PhysEnv.getRigidBody()","text":"<p>Returns the Rigid Body with name <code>name</code>, if present. Returns <code>nil</code> otherwise.</p> <p><code>yg.phys.PhysEnv.getRigidBody(name)</code> -&gt; <code>yg.phys.RigidBody</code> (may return nil)</p> Argument Type Info <code>name</code> string Name of the Rigid Body to get"},{"location":"yg_phys/#function-ygphysphysenvgetrigidbodiesstartingwith","title":"function yg.phys.PhysEnv.getRigidBodiesStartingWith()","text":"<p>Returns an array of Rigid Bodies with names starting with <code>name</code>.</p> <p><code>yg.phys.PhysEnv.getRigidBodiesStartingWith(name)</code> -&gt; {<code>yg.phys.RigidBody</code>} (may return empty array)</p> Argument Type Info <code>name</code> string Name prefix of the Rigid Bodies to get"},{"location":"yg_phys/#function-ygphysphysenvtick","title":"function yg.phys.PhysEnv.tick()","text":"<p>Advances (ticks) the Physics Environment by a given time delta.</p> <p><code>yg.phys.PhysEnv.tick(dt)</code> -&gt; <code>void</code></p> Argument Type Info <code>dt</code> number Time delta [seconds]"},{"location":"yg_phys/#function-ygphysphysenvgetcollisions","title":"function yg.phys.PhysEnv.getCollisions()","text":"<p>Returns an array of Collision information that happened since last frame.</p> <p><code>yg.phys.PhysEnv.getCollisions()</code> -&gt; {<code>yg.phys.Collision</code>} (may return empty array)</p>"},{"location":"yg_phys/#function-ygphysphysenvraytest","title":"function yg.phys.PhysEnv.rayTest()","text":"<p>Casts a ray and tests its collision in the scene.</p> <p><code>yg.phys.PhysEnv.rayTest(eyeX, eyeY, eyeZ, targetX, targetY, targetZ)</code> -&gt; <code>yg.phys.RayTestResult</code></p> Argument Type Info <code>eyeX</code> number X-coordinate of ray origin <code>eyeY</code> number Y-coordinate of ray origin <code>eyeZ</code> number Z-coordinate of ray origin <code>targetX</code> number X-coordinate of target point <code>targetY</code> number Y-coordinate of target point <code>targetZ</code> number Z-coordinate of target point"},{"location":"yg_phys/#class-ygphysrigidbodyinfo","title":"class yg.phys.RigidBodyInfo","text":"<p>Represents a Rigid Body Info structure to be used for Rigid Body creation, via <code>yg.phys.PhysEnv.newRigidBody()</code>.</p>"},{"location":"yg_phys/#example","title":"Example","text":"<pre><code>-- Create RigidBodyInfo instance and set some properties\nrbInfo = yg.phys.RigidBodyInfo()\nrbInfo.mass = 2.5\nrbInfo.friction = 0.5\nrbInfo.restitution = 0.5\n</code></pre>"},{"location":"yg_phys/#constructor_1","title":"constructor","text":"<p><code>yg.phys.RigidBodyInfo()</code> -&gt; <code>yg.phys.RigidBodyInfo</code></p>"},{"location":"yg_phys/#properties","title":"Properties","text":"Property Type Default Info <code>mass</code> number 1.0 Mass [kg] <code>linearDamping</code> number 0.0 Linear Damping factor in [0,1] <code>angularDamping</code> number 0.0 Angular Damping factor in [0,1] <code>friction</code> number 0.5 Friction in [0,1] <code>rollingFriction</code> number 0.0 Rolling Friction in [0,1] <code>spinningFriction</code> number 0.0 Spinning Friction in [0,1] <code>restitution</code> number 0.0 Restitution in [0,1] <code>linearSleepingThreshold</code> number 0.8 Linear Sleeping Threshold in [0,1] <code>angularSleepingThreshold</code> number 1.0 Angular Sleeping Threshold in [0,1] <code>kinematic</code> boolean <code>false</code> If <code>true</code>, the Rigid Body will be kinematic <code>disableDeactivation</code> boolean <code>false</code> if <code>true</code>, the Rigid Body will have disabled deactivation"},{"location":"yg_phys/#class-ygphysrigidbody","title":"class yg.phys.RigidBody","text":"<p>Represents a Rigid Body.</p>"},{"location":"yg_phys/#function-ygphysrigidbodygettrafo","title":"function yg.phys.RigidBody.getTrafo()","text":"<p>Returns the current pose (Trafo) of the Rigid Body.</p> <p><code>yg.phys.RigidBody.getTrafo()</code> -&gt; <code>yg.math.Trafo</code></p>"},{"location":"yg_phys/#function-ygphysrigidbodysettrafo","title":"function yg.phys.RigidBody.setTrafo()","text":"<p>Sets the Rigid Body to a new pose (Trafo).</p> <p><code>yg.phys.RigidBody.setTrafo(trafo)</code> -&gt; <code>void</code></p> Argument Type Info <code>trafo</code> yg.math.Trafo Trafo to set"},{"location":"yg_phys/#function-ygphysrigidbodysetrestitution","title":"function yg.phys.RigidBody.setRestitution()","text":"<p>Sets the Restitution of the Rigid Body.</p> <p><code>yg.phys.RigidBody.setRestitution(restitution)</code> -&gt; <code>void</code></p> Argument Type Info <code>restitution</code> number Restitution to set in [0,1]"},{"location":"yg_phys/#function-ygphysrigidbodysetfriction","title":"function yg.phys.RigidBody.setFriction()","text":"<p>Sets the Friction of the Rigid Body.</p> <p><code>yg.phys.RigidBody.setFriction(friction)</code> -&gt; <code>void</code></p> Argument Type Info <code>friction</code> number Friction to set in [0,1]"},{"location":"yg_phys/#function-ygphysrigidbodysetsleepingthresholds","title":"function yg.phys.RigidBody.setSleepingThresholds()","text":"<p>Sets the Sleeping Thresholds of the Rigid Body.</p> <p><code>yg.phys.RigidBody.setSleepingThresholds(linear, angular)</code> -&gt; <code>void</code></p> Argument Type Info <code>linear</code> number Linear sleeping threshold to set in [0,1] <code>angular</code> number Angular sleeping threshold to set in [0,1]"},{"location":"yg_phys/#function-ygphysrigidbodysetlinearfactors","title":"function yg.phys.RigidBody.setLinearFactors()","text":"<p>Sets the Linear Factors of the Rigid Body.</p> <p><code>yg.phys.RigidBody.setLinearFactors(x, y, z)</code> -&gt; <code>void</code></p> Argument Type Info <code>x</code> number X-component linear factor to set in [0,1] <code>y</code> number Y-component linear factor to set in [0,1] <code>z</code> number Z-component linear factor to set in [0,1]"},{"location":"yg_phys/#function-ygphysrigidbodysetangularfactor","title":"function yg.phys.RigidBody.setAngularFactor()","text":"<p>Sets the Angular Factors of the Rigid Body from a single value which is applied to all axes.</p> <p><code>yg.phys.RigidBody.setAngularFactor(angFac)</code> -&gt; <code>void</code></p> Argument Type Info <code>angFac</code> number Angular factor to set in [0,1]"},{"location":"yg_phys/#function-ygphysrigidbodysetangularfactors","title":"function yg.phys.RigidBody.setAngularFactors()","text":"<p>Sets the Angular Factors of the Rigid Body from individual values for x-,y-,z-components.</p> <p><code>yg.phys.RigidBody.setAngularFactors(x, y, z)</code> -&gt; <code>void</code></p> Argument Type Info <code>x</code> number X-component angular factor to set in [0,1] <code>y</code> number Y-component angular factor to set in [0,1] <code>z</code> number Z-component angular factor to set in [0,1]"},{"location":"yg_phys/#function-ygphysrigidbodyapplycentralforce","title":"function yg.phys.RigidBody.applyCentralForce()","text":"<p>Applies a central force to the Rigid Body. The force <code>F</code> is applied to the Rigid Body for the time delta <code>t</code> of the next simulation step only.</p> <p>Example: Applying a force <code>F=5N</code> for <code>t=1s</code> changes the velocity of a Rigid Body with mass <code>m=1kg</code> like so (damping etc. ignored):</p> <pre><code>dV = F  * t  / m\ndV = 5N * 1s / 1kg\ndV = 5m/s\n</code></pre> <p><code>yg.phys.RigidBody.applyCentralForce(x, y, z)</code> -&gt; <code>void</code></p> Argument Type Info <code>x</code> number X-component central force to apply [N] <code>y</code> number Y-component central force to apply [N] <code>z</code> number Z-component central force to apply [N]"},{"location":"yg_phys/#function-ygphysrigidbodyapplycentralimpulse","title":"function yg.phys.RigidBody.applyCentralImpulse()","text":"<p>Applies a central impulse to the Rigid Body. The impulse is immediately applied to the Rigid Body as if a force <code>F</code> was applied for a time <code>t</code>. Unit: [N*s] (newton-second).</p> <p>Example: Applying an impulse <code>J=5Ns</code> changes the velocity of a Rigid Body with mass <code>m=1kg</code> like so (damping etc. ignored):</p> <pre><code>dV = J   / m\ndV = 5Ns / 1kg\ndV = 5m/s\n</code></pre> <p><code>yg.phys.RigidBody.applyCentralImpulse(x, y, z)</code> -&gt; <code>void</code></p> Argument Type Info <code>x</code> number X-component central impulse to apply [N*s] <code>y</code> number Y-component central impulse to apply [N*s] <code>z</code> number Z-component central impulse to apply [N*s]"},{"location":"yg_phys/#properties_1","title":"Properties","text":"Property Type Info <code>name</code> string Name of the Rigid Body"},{"location":"yg_phys/#class-ygphyscollision","title":"class yg.phys.Collision","text":"<p>Represents a Collision between two Rigid Bodies.</p>"},{"location":"yg_phys/#class-ygphysraytestresult","title":"class yg.phys.RayTestResult","text":"<p>Represents the result of a ray test.</p>"},{"location":"yg_time/","title":"yg.time","text":"<p>Functions for timing.</p>"},{"location":"yg_time/#function-ygtimegetdelta","title":"function yg.time.getDelta()","text":"<p>Returns the time delta since last frame in [seconds].</p> <p><code>yg.time.getDelta()</code> -&gt; <code>number</code></p>"},{"location":"yg_time/#function-ygtimegettime","title":"function yg.time.getTime()","text":"<p>Returns the time since application start in [seconds].</p> <p><code>yg.time.getTime()</code> -&gt; <code>number</code></p>"},{"location":"yg_time/#function-ygtimegetclockperiod","title":"function yg.time.getClockPeriod()","text":"<p>Returns the clock tick period in [seconds]. This is a diagnostic value and not relevant for the user.</p> <p><code>yg.time.getClockPeriod()</code> -&gt; <code>number</code></p>"},{"location":"yg_util/","title":"yg.util","text":"<p>Utility classes.</p>"},{"location":"yg_util/#class-ygutilmotion","title":"class yg.util.Motion","text":"<p>Represents a scalar value that performs a sequence of motion segments over time.</p>"},{"location":"yg_util/#example","title":"Example","text":"<pre><code>function init()\n    -- Initialize a Motion object. Make a repeating Motion:\n    --   Acting from -9 to 9 in 3 seconds with SMOOTH2 easing\n    --   Idling 0.2 seconds at 9\n    --   Moving back to -9 in 1.5 seconds with CUBEDOWN easing\n    --   Idling 0.2 seconds at -9\n    mot = yg.util.Motion(\"REPEAT\")\n    mot:addRamp(3.0, -9, 9, \"SMOOTH2\")\n    mot:addIdle(0.2, 9)\n    mot:addRamp(1.5, 9, -9, \"CUBEDOWN\")\n    mot:addIdle(0.2, -9)\nend\n\nfunction tick()\n    -- Tick the Motion with the time delta of the last frame\n    mot:tick(yg.time.getDelta())\n\n    -- Get the current scalar value of the Motion (and do something with it)\n    motVal = mot:val()\nend\n</code></pre>"},{"location":"yg_util/#constructor","title":"constructor","text":"<p><code>yg.util.Motion(flowType)</code> -&gt; <code>yg.util.Motion</code></p> Argument Type Info <code>flowType</code> string Motion flow type. Options: <code>\"ONCE\"</code>, <code>\"REPEAT\"</code>, <code>\"PINGPONG\"</code>"},{"location":"yg_util/#function-ygutilmotionaddidle","title":"function yg.util.Motion.addIdle()","text":"<p>Adds an idle segment to the Motion.</p> <p>Todo: check if chaining works and if this function returns a Motion reference.</p> <p><code>yg.util.Motion.addIdle(dt, val)</code> -&gt; <code>void</code></p> Argument Type Info <code>dt</code> number Duration of the segment [seconds] <code>val</code> number Constant (idle) value of the segment"},{"location":"yg_util/#function-ygutilmotionaddramp","title":"function yg.util.Motion.addRamp()","text":"<p>Adds a ramp segment to the Motion.</p> <p>Todo: check if chaining works and if this function returns a Motion reference.</p> <p><code>yg.util.Motion.addRamp(dt, val0, val1, ease)</code> -&gt; <code>void</code></p> Argument Type Info <code>dt</code> number Duration of the segment [seconds] <code>val0</code> number Start value of the segment <code>val1</code> number End value of the segment <code>ease</code> string Easing of the segment. Options: <code>\"NONE\"</code>, <code>\"SQUARE\"</code>, <code>\"SQUAREDOWN\"</code>, <code>\"CUBE\"</code>, <code>\"CUBEDOWN\"</code>, <code>\"SINE\"</code>, <code>\"SINEDOWN\"</code>, <code>\"SMOOTH\"</code>, <code>\"SMOOTH2\"</code>"},{"location":"yg_util/#function-ygutilmotiontick","title":"function yg.util.Motion.tick()","text":"<p>Advances (ticks) the motion by a given time delta.</p> <p><code>yg.util.Motion.tick(dt)</code> -&gt; <code>void</code></p> Argument Type Info <code>dt</code> number Time delta [seconds]"},{"location":"yg_util/#function-ygutilmotionval","title":"function yg.util.Motion.val()","text":"<p>Returns the current scalar value of the motion.</p> <p><code>yg.util.Motion.val()</code> -&gt; <code>number</code></p>"},{"location":"yg_util/#function-ygutilmotionpause","title":"function yg.util.Motion.pause()","text":"<p>Enables/disables (pauses) the Motion. During pause, <code>tick()</code> has no effect.</p> <p><code>yg.util.Motion.pause(pause)</code> -&gt; <code>void</code></p> Argument Type Info <code>pause</code> boolean Enable/disable pause. Options: <code>true</code>, <code>false</code>"},{"location":"yg_util/#function-ygutilmotionrestart","title":"function yg.util.Motion.restart()","text":"<p>Restarts the Motion.</p> <p><code>yg.util.Motion.restart()</code> -&gt; <code>void</code></p>"},{"location":"yg_util/#function-ygutilmotionsetdirection","title":"function yg.util.Motion.setDirection()","text":"<p>Enables/disables forward direction of the Motion.</p> <p><code>yg.util.Motion.setDirection(forward)</code> -&gt; <code>void</code></p> Argument Type Info <code>forward</code> boolean Enable/disable forward direction. Options: <code>true</code>, <code>false</code>"},{"location":"yg_util/#function-ygutilmotionisfinished","title":"function yg.util.Motion.isFinished()","text":"<p>Returns <code>true</code> if the Motion is finished.</p> <p><code>yg.util.Motion.isFinished()</code> -&gt; <code>boolean</code></p>"},{"location":"yg_util/#function-ygutilmotionispaused","title":"function yg.util.Motion.isPaused()","text":"<p>Returns <code>true</code> if the Motion is paused.</p> <p><code>yg.util.Motion.isPaused()</code> -&gt; <code>boolean</code></p>"},{"location":"yg_util/#function-ygutilmotiongetdirection","title":"function yg.util.Motion.getDirection()","text":"<p>Returns <code>true</code> if the Motion is in forward direction.</p> <p><code>yg.util.Motion.getDirection()</code> -&gt; <code>boolean</code></p>"}]}